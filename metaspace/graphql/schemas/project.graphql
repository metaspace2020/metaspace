enum PublicationStatus {
  UNPUBLISHED
  UNDER_REVIEW
  PUBLISHED
}

type Project {
  id: ID!
  name: String!
  isPublic: Boolean!
  urlSlug: String
  currentUserRole: UserProjectRole
  hasPendingRequest: Boolean  # null if current user is not allowed to see
  members: [UserProject!]    # null if current user is not allowed to see
  numMembers: Int!
  numDatasets: Int!
  createdDT: String!
  latestUploadDT: String
  projectDescription: String  # JSON-based rich text, in a format defined by tiptap (https://tiptap.scrumpy.io/)
  reviewToken: String
  publicationStatus: PublicationStatus!
  publishedDT: String
  externalLinks: [ExternalLink!]!
}

type ExternalLink {
  provider: String!
  link: String!
}

input CreateProjectInput {
  name: String!
  isPublic: Boolean!
  urlSlug: String
}

input UpdateProjectInput {
  name: String
  isPublic: Boolean
  urlSlug: String
  projectDescription: String  # JSON-based rich text, in a format defined by tiptap (https://tiptap.scrumpy.io/)
}

input UpdateUserProjectInput {
  role: UserProjectRole
}

# Many-to-many relationship between User and Project
type UserProject {
  user: User!
  project: Project!
  role: UserProjectRole!
  numDatasets: Int!
}

enum ProjectOrderBy {
  ORDER_BY_DATE
  ORDER_BY_POPULARITY
  ORDER_BY_NAME
  ORDER_BY_UP_DATE
  ORDER_BY_MANAGER_NAME
  ORDER_BY_DATASETS_COUNT
  ORDER_BY_MEMBERS_COUNT
}

enum UserProjectRole {
  INVITED    # User was invited into the project but hasn't confirmed it yet
  PENDING    # User requested to join the project but the PI hasn't confirmed it yet
  MEMBER     # Normal member of the project
  MANAGER    # Project administrator
  REVIEWER   # Anonymous user with read-only access to specified projects
}

type Query {
  project(projectId: ID!): Project
  projectByUrlSlug(urlSlug: String!): Project
  allProjects(orderBy: ProjectOrderBy = ORDER_BY_POPULARITY,
              sortingOrder: SortingOrder = DESCENDING,
              query: String, offset: Int = 0, limit: Int = 10): [Project!]!
  projectsCount(orderBy: ProjectOrderBy = ORDER_BY_POPULARITY,
              sortingOrder: SortingOrder = DESCENDING,
              query: String): Int!

  projectUrlSlugIsValid(urlSlug: String!, existingProjectId: ID): Boolean! # Throws error if invalid, consistent with updateProject
}

type Mutation {
  ## Managing projects
  createProject(projectDetails: CreateProjectInput!): Project!
  updateProject(projectId: ID!, projectDetails: UpdateProjectInput!): Project!
  # Throws errors of type: "under_review_or_published"
  deleteProject(projectId: ID!): Boolean!

  ## Managing project users
  leaveProject(projectId: ID!): Boolean!
  removeUserFromProject(projectId: ID!, userId: ID!): Boolean!

  ## User requests access
  requestAccessToProject(projectId: ID!): UserProject!
  acceptRequestToJoinProject(projectId: ID!, userId: ID!): UserProject!
  # User can reject request with `leaveProject`

  ## Project invites user
  inviteUserToProject(projectId: ID!, email: String!): UserProject!
  acceptProjectInvitation(projectId: ID!): UserProject!
  # Project can reject user with `removeUserFromProject`

  updateUserProject(projectId: ID!, userId: ID!, update: UpdateUserProjectInput!): Boolean!

  importDatasetsIntoProject(projectId: ID!, datasetIds: [ID!], removedDatasetIds: [ID!]): Boolean!

  # Managing review links
  createReviewLink(projectId: ID!): Project!
  deleteReviewLink(projectId: ID!): Boolean!

  # Project publishing
  publishProject(projectId: ID!): Project!
  unpublishProject(projectId: ID!, isPublic: Boolean): Project!  # for admins only

  # Links to related websites (publications, etc.)
  addProjectExternalLink(projectId: ID!,
                         provider: String!,
                         link: String!,
                         # set replaceExisting to True to delete any previous links to the same provider
                         replaceExisting: Boolean! = False): Project!

  removeProjectExternalLink(projectId: ID!,
                            provider: String!,
                            link: String): Project!
}
