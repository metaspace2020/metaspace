type User {
  id: ID!
  name: String
  role: String             # null if current user is not allowed to see
  email: String            # null if current user is not allowed to see
  groups: [UserGroup!]     # null if current user is not allowed to see
  primaryGroup: UserGroup  # null if current user is not allowed to see
  projects: [UserProject!] # null if current user is not allowed to see
  apiKey: String           # null if current user is not allowed to see
  planId: String
  plan: Plan
  createdAt: String
  updatedAt: String
}

input UpdateUserInput {
  name: String
  role: String
  email: String
  primaryGroupId: ID
  planId: Int
}

input UserFilter {
  name: String
  email: String
  role: String
  planId: String
  userId: ID
}

enum UserOrderBy {
  ORDER_BY_NAME
  ORDER_BY_EMAIL
  ORDER_BY_ROLE
  ORDER_BY_DATE
  ORDER_BY_UPDATED_AT
  ORDER_BY_PLAN_ID
}

type Query {
  currentUser: User
  user(userId: ID!): User
  allUsers(
    query: String,
    orderBy: UserOrderBy = ORDER_BY_NAME,
    sortingOrder: SortingOrder = ASCENDING,
    filter: UserFilter = {},
    offset: Int = 0,
    limit: Int = 10
  ): [User!]  # For admins
  countUsers(
    query: String,filter: UserFilter = {}): Int!
}

type Mutation {
  updateUser(userId: ID!, update: UpdateUserInput!): User!
  deleteUser(userId: ID!, deleteDatasets: Boolean!): Boolean
  resetUserApiKey(userId: ID!, removeKey: Boolean! = False): User!
  sendContactMessage(email: String!, name: String!, category: String!, message: String!): Boolean!
}
